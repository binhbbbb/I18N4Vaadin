/*
 * Copyright (c) 2012, 2013 Petter Holmström
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.github.peholmst.i18n4vaadin.ap.shared;

import java.io.IOException;
import java.io.OutputStream;
import java.util.Locale;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.processing.ProcessingEnvironment;
import javax.tools.FileObject;
import javax.tools.StandardLocation;

/**
 *
 * @author Petter Holmström
 */
public class BundleFileGenerator {

    private static final Logger LOG = Logger.getLogger(BundleFileGenerator.class.getCanonicalName());
    protected final ProcessingEnvironment processingEnv;
    protected final PackageDescriptor destinationPackage;
    protected final String bundleName;
    protected final MessageCollection messages;

    public BundleFileGenerator(ProcessingEnvironment processingEnv, PackageDescriptor destinationPackage, String bundleName, MessageCollection messages) {
        this.processingEnv = processingEnv;
        this.bundleName = bundleName;
        this.destinationPackage = destinationPackage;
        this.messages = messages;
    }

    public void createFiles() {
        for (Locale locale : messages.getLocales()) {
            createFile(locale);
        }
    }

    protected void createFile(Locale locale) {
        final String fileName = bundleName + getBundleSuffix(locale) + ".properties";
        final String packageName = destinationPackage.getName();
        LOG.log(Level.INFO, "Creating bundle file {0} in package {1}", new Object[]{fileName, packageName});
        Properties props = new Properties();
        for (MessageDescriptor message : messages.getMessagesByLocale(locale)) {
            LOG.log(Level.INFO, "Adding message {0} = {1}", new Object[] {message.getKey(), message.getValue()});
            props.put(message.getKey(), message.getValue());
        }
        try {
            FileObject fo = processingEnv.getFiler().createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName);
            OutputStream out = fo.openOutputStream();
            props.store(out, "Auto-generated by " + getClass().getCanonicalName());
            out.close();
        } catch (IOException e) {
            LOG.log(Level.SEVERE, "Could not create bundle file " + fileName, e);
            throw new RuntimeException(e);
        }
    }

    private static String getBundleSuffix(final Locale locale) {
        if (locale == null) {
            return "";
        } else {
            return "_" + locale.toString();
        }
    }
}
